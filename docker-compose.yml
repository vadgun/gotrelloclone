networks:
  kafka-network:
    driver: bridge
  app-network:
    driver: bridge

services:
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    environment:
      - KAFKA_SERVER=kafka:9092
    ports:
      - "9308:9308"
    networks:
      - app-network
      - kafka-network
    depends_on:
      kafka: 
        condition: service_healthy

  board-service:
    build: ./board-service
    ports:
      - "8081:8080"
    env_file:
      - ./board-service/.env
    networks:
      - app-network
      - kafka-network
    depends_on:
      kafka-exporter:
        condition: service_started
      mongo-board:
        condition: service_started
      kafka: 
        condition: service_healthy

  task-service:
    build: ./task-service
    ports:
      - "8082:8080"
    env_file:
      - ./task-service/.env
    depends_on:
      kafka-exporter:
        condition: service_started
      mongo-task:
        condition: service_started
      kafka: 
        condition: service_healthy
      board-service:
        condition: service_started
    networks:
      - app-network
      - kafka-network

  user-service:
    build: ./user-service
    ports:
      - "8080:8080"
    env_file:
      - ./user-service/.env
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - app-network
      - kafka-network
    depends_on:
      kafka-exporter:
        condition: service_started
      mongo-user:
        condition: service_started
      kafka: 
        condition: service_healthy

  notification-service:
    build: ./notification-service
    env_file:
      - ./notification-service/.env
    ports:
      - "8083:8080"
    networks:
      - app-network
      - kafka-network
    depends_on:
      kafka-exporter:
        condition: service_started 
      mongo-notification:
        condition: service_started
      kafka: 
        condition: service_healthy
      user-service:
        condition: service_started
      task-service:
        condition: service_started

  mongo-board:
    image: mongo
    container_name: mongo-board
    ports:
      - "27018:27017"
    volumes:
      - mongo_board_data:/data/db
    networks:
      - app-network
    command: mongod --quiet --logpath /dev/null

  mongo-task:
    image: mongo
    container_name: mongo-task
    ports:
      - "27019:27017"
    volumes:
      - mongo_task_data:/data/db
    networks:
      - app-network
    command: mongod --quiet --logpath /dev/null

  mongo-user:
    image: mongo
    container_name: mongo-user
    ports:
      - "27020:27017"
    volumes:
      - mongo_user_data:/data/db
    networks:
      - app-network
    command: mongod --quiet --logpath /dev/null

  mongo-notification:
    image: mongo
    container_name: mongo-notification
    ports:
      - "27021:27017"
    volumes:
      - mongo_notification_data:/data/db
    networks:
      - app-network
    command: mongod --quiet --logpath /dev/null

volumes:
  mongo_board_data:
  mongo_task_data:
  mongo_user_data:
  mongo_notification_data:
  grafana_data:
  kafka_exporter_data:
